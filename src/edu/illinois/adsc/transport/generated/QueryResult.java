/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.illinois.adsc.transport.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-22")
public class QueryResult implements org.apache.thrift.TBase<QueryResult, QueryResult._Fields>, java.io.Serializable, Cloneable, Comparable<QueryResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryResult");

  private static final org.apache.thrift.protocol.TField QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("query_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField QUERY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("query_type", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField RESULT2_FIELD_DESC = new org.apache.thrift.protocol.TField("result2", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryResultTupleSchemeFactory());
  }

  public long query_id; // required
  public long query_type; // required
  public long result; // required
  public long result2; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY_ID((short)1, "query_id"),
    QUERY_TYPE((short)2, "query_type"),
    RESULT((short)3, "result"),
    RESULT2((short)4, "result2");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY_ID
          return QUERY_ID;
        case 2: // QUERY_TYPE
          return QUERY_TYPE;
        case 3: // RESULT
          return RESULT;
        case 4: // RESULT2
          return RESULT2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUERY_ID_ISSET_ID = 0;
  private static final int __QUERY_TYPE_ISSET_ID = 1;
  private static final int __RESULT_ISSET_ID = 2;
  private static final int __RESULT2_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("query_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUERY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("query_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESULT2, new org.apache.thrift.meta_data.FieldMetaData("result2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryResult.class, metaDataMap);
  }

  public QueryResult() {
  }

  public QueryResult(
    long query_id,
    long query_type,
    long result,
    long result2)
  {
    this();
    this.query_id = query_id;
    setQuery_idIsSet(true);
    this.query_type = query_type;
    setQuery_typeIsSet(true);
    this.result = result;
    setResultIsSet(true);
    this.result2 = result2;
    setResult2IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryResult(QueryResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.query_id = other.query_id;
    this.query_type = other.query_type;
    this.result = other.result;
    this.result2 = other.result2;
  }

  public QueryResult deepCopy() {
    return new QueryResult(this);
  }

  @Override
  public void clear() {
    setQuery_idIsSet(false);
    this.query_id = 0;
    setQuery_typeIsSet(false);
    this.query_type = 0;
    setResultIsSet(false);
    this.result = 0;
    setResult2IsSet(false);
    this.result2 = 0;
  }

  public long getQuery_id() {
    return this.query_id;
  }

  public QueryResult setQuery_id(long query_id) {
    this.query_id = query_id;
    setQuery_idIsSet(true);
    return this;
  }

  public void unsetQuery_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUERY_ID_ISSET_ID);
  }

  /** Returns true if field query_id is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_id() {
    return EncodingUtils.testBit(__isset_bitfield, __QUERY_ID_ISSET_ID);
  }

  public void setQuery_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUERY_ID_ISSET_ID, value);
  }

  public long getQuery_type() {
    return this.query_type;
  }

  public QueryResult setQuery_type(long query_type) {
    this.query_type = query_type;
    setQuery_typeIsSet(true);
    return this;
  }

  public void unsetQuery_type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUERY_TYPE_ISSET_ID);
  }

  /** Returns true if field query_type is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_type() {
    return EncodingUtils.testBit(__isset_bitfield, __QUERY_TYPE_ISSET_ID);
  }

  public void setQuery_typeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUERY_TYPE_ISSET_ID, value);
  }

  public long getResult() {
    return this.result;
  }

  public QueryResult setResult(long result) {
    this.result = result;
    setResultIsSet(true);
    return this;
  }

  public void unsetResult() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESULT_ISSET_ID);
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return EncodingUtils.testBit(__isset_bitfield, __RESULT_ISSET_ID);
  }

  public void setResultIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESULT_ISSET_ID, value);
  }

  public long getResult2() {
    return this.result2;
  }

  public QueryResult setResult2(long result2) {
    this.result2 = result2;
    setResult2IsSet(true);
    return this;
  }

  public void unsetResult2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESULT2_ISSET_ID);
  }

  /** Returns true if field result2 is set (has been assigned a value) and false otherwise */
  public boolean isSetResult2() {
    return EncodingUtils.testBit(__isset_bitfield, __RESULT2_ISSET_ID);
  }

  public void setResult2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESULT2_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY_ID:
      if (value == null) {
        unsetQuery_id();
      } else {
        setQuery_id((Long)value);
      }
      break;

    case QUERY_TYPE:
      if (value == null) {
        unsetQuery_type();
      } else {
        setQuery_type((Long)value);
      }
      break;

    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((Long)value);
      }
      break;

    case RESULT2:
      if (value == null) {
        unsetResult2();
      } else {
        setResult2((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY_ID:
      return Long.valueOf(getQuery_id());

    case QUERY_TYPE:
      return Long.valueOf(getQuery_type());

    case RESULT:
      return Long.valueOf(getResult());

    case RESULT2:
      return Long.valueOf(getResult2());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY_ID:
      return isSetQuery_id();
    case QUERY_TYPE:
      return isSetQuery_type();
    case RESULT:
      return isSetResult();
    case RESULT2:
      return isSetResult2();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryResult)
      return this.equals((QueryResult)that);
    return false;
  }

  public boolean equals(QueryResult that) {
    if (that == null)
      return false;

    boolean this_present_query_id = true;
    boolean that_present_query_id = true;
    if (this_present_query_id || that_present_query_id) {
      if (!(this_present_query_id && that_present_query_id))
        return false;
      if (this.query_id != that.query_id)
        return false;
    }

    boolean this_present_query_type = true;
    boolean that_present_query_type = true;
    if (this_present_query_type || that_present_query_type) {
      if (!(this_present_query_type && that_present_query_type))
        return false;
      if (this.query_type != that.query_type)
        return false;
    }

    boolean this_present_result = true;
    boolean that_present_result = true;
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (this.result != that.result)
        return false;
    }

    boolean this_present_result2 = true;
    boolean that_present_result2 = true;
    if (this_present_result2 || that_present_result2) {
      if (!(this_present_result2 && that_present_result2))
        return false;
      if (this.result2 != that.result2)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_query_id = true;
    list.add(present_query_id);
    if (present_query_id)
      list.add(query_id);

    boolean present_query_type = true;
    list.add(present_query_type);
    if (present_query_type)
      list.add(query_type);

    boolean present_result = true;
    list.add(present_result);
    if (present_result)
      list.add(result);

    boolean present_result2 = true;
    list.add(present_result2);
    if (present_result2)
      list.add(result2);

    return list.hashCode();
  }

  @Override
  public int compareTo(QueryResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQuery_id()).compareTo(other.isSetQuery_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_id, other.query_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_type()).compareTo(other.isSetQuery_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_type, other.query_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult2()).compareTo(other.isSetResult2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result2, other.result2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryResult(");
    boolean first = true;

    sb.append("query_id:");
    sb.append(this.query_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("query_type:");
    sb.append(this.query_type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("result:");
    sb.append(this.result);
    first = false;
    if (!first) sb.append(", ");
    sb.append("result2:");
    sb.append(this.result2);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryResultStandardSchemeFactory implements SchemeFactory {
    public QueryResultStandardScheme getScheme() {
      return new QueryResultStandardScheme();
    }
  }

  private static class QueryResultStandardScheme extends StandardScheme<QueryResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.query_id = iprot.readI64();
              struct.setQuery_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUERY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.query_type = iprot.readI64();
              struct.setQuery_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.result = iprot.readI64();
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESULT2
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.result2 = iprot.readI64();
              struct.setResult2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
      oprot.writeI64(struct.query_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUERY_TYPE_FIELD_DESC);
      oprot.writeI64(struct.query_type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESULT_FIELD_DESC);
      oprot.writeI64(struct.result);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESULT2_FIELD_DESC);
      oprot.writeI64(struct.result2);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryResultTupleSchemeFactory implements SchemeFactory {
    public QueryResultTupleScheme getScheme() {
      return new QueryResultTupleScheme();
    }
  }

  private static class QueryResultTupleScheme extends TupleScheme<QueryResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetQuery_id()) {
        optionals.set(0);
      }
      if (struct.isSetQuery_type()) {
        optionals.set(1);
      }
      if (struct.isSetResult()) {
        optionals.set(2);
      }
      if (struct.isSetResult2()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetQuery_id()) {
        oprot.writeI64(struct.query_id);
      }
      if (struct.isSetQuery_type()) {
        oprot.writeI64(struct.query_type);
      }
      if (struct.isSetResult()) {
        oprot.writeI64(struct.result);
      }
      if (struct.isSetResult2()) {
        oprot.writeI64(struct.result2);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.query_id = iprot.readI64();
        struct.setQuery_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.query_type = iprot.readI64();
        struct.setQuery_typeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.result = iprot.readI64();
        struct.setResultIsSet(true);
      }
      if (incoming.get(3)) {
        struct.result2 = iprot.readI64();
        struct.setResult2IsSet(true);
      }
    }
  }

}

